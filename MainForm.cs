using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Threading.Tasks;
using DXData_Hub.Properties;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Configuration;
using System.Data.SqlClient;
using DevExpress.XtraTreeList.Nodes;
using DevExpress.XtraGrid.Views.Grid;
using com.rusanu.dataconnectiondialog;

namespace DXData_Hub
{
    public partial class MainForm : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        string ConceptName; int ConceptID;
        string AttributName; int AttributID;
        string SourceName; string SourceType; int SourceID;
        string TabName; int TabID;
        string ConcName; int ConcID;
        string ObjName; int ObjID;
        string ConceptMapType; int ConceptMapID;
        string AttributMapType; int AttributMapID;
        string ColName; int ColID;
        string AttName; int AttID;
        string ParamName; int ParamID;
        object focusedConcept;
        int focusedSource;
        public MainForm()
        {
            InitializeComponent();
            navBarControl.ActiveGroup = navBarControl.Groups[0];
            DS_gridView_Tab.GetTabImage += GetTabImage;
            DS_GridView_Cons.GetTabImage += GetTabImage1;
            DS_GridView_Mthd.GetTabImage += GetTabImage2;

            //-------------- GS Data Adapter.Fill-----------------------//
            concepts_TAdapter.Fill(gS_Concepts.Concepts_);
            attributes_TAdapter.Fill(gS_Attributes.Attributes_);
            relations_TableAdapter.Fill(gS_Relations.Relations_);
            vocabularysTableAdapter.Fill(gS_Vocabulays.Vocabularys);

            //-------------- DS Data Adapter.Fill-----------------------//
            dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);

            RelationalDataTableAdapter.Fill(dS_RelationalData.DataSources_RelationalData);
            RDB_TablesTableAdapter.Fill(dS_RDBTables.RelationalData_Tables);
            RDB_ColumnsTableAdapter.Fill(dS_RDBTables.RelationalData_Columns);

            LinkedDataTableAdapter.Fill(dS_LinkedData.DataSources_LinkedData);
            LDConcepts_TableAdapter.Fill(dS_LDConcepts.LinkedData_Concepts);
            LD_AttributesTableAdapter.Fill(dS_LDConcepts.LinkedData_Attributes);
            LD_RelationsTableAdapter.Fill(dS_LDConcepts.LinkedData_Relations);

            SocialDataTableAdapter.Fill(dS_SocialData.DataSources_SocialData);
            SDMethods_TableAdapter.Fill(dS_SDMethods.SocialData_Methods);
            SD_ParametersTableAdapter.Fill(dS_SDMethods.SocialData_Parameters);
            // This line of code is generated by Data Source Configuration Wizard
            Concept_mapTableAdapter.Fill(mP_Concept_map.Concept_map);
            Concept_map_Conc_2_TabTableAdapter.Fill(mP_Concept_map.Concept_map_Conc_2_Tab);

            // This line of code is generated by Data Source Configuration Wizard
            RDB_MP_ColumnsTableAdapter.Fill(dS_RDB_Columns.RelationalData_Columns);
            LD_MP_AttributesTabletAdapter.Fill(dS_LD_Attributes.LinkedData_Attributes);
            SD_MP_ParamsTabletAdapter.Fill(dS_SD_Params.SocialData_Parameters);
            // This line of code is generated by Data Source Configuration Wizard
            Attribut_mapTableAdapter.Fill(mP_Attribute_map.Attribut_map);
        }
        // TreeListViewState treeListViewState;
        private void MainForm_Activated(object sender, EventArgs e)
        {
            concepts_TAdapter.Fill(gS_Concepts.Concepts_);
            GS_treeList.ExpandAll();
            MP_GStreeList.ExpandAll();
            GS_treeList.FocusedNode = GS_treeList.FindNodeByKeyID(focusedConcept);
            dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);

            RelationalDataTableAdapter.Fill(dS_RelationalData.DataSources_RelationalData);
            RDB_TablesTableAdapter.Fill(dS_RDBTables.RelationalData_Tables);
            RDB_ColumnsTableAdapter.Fill(dS_RDBTables.RelationalData_Columns);

            LinkedDataTableAdapter.Fill(dS_LinkedData.DataSources_LinkedData);
            LDConcepts_TableAdapter.Fill(dS_LDConcepts.LinkedData_Concepts);
            LD_AttributesTableAdapter.Fill(dS_LDConcepts.LinkedData_Attributes);
            LD_RelationsTableAdapter.Fill(dS_LDConcepts.LinkedData_Relations);

            SocialDataTableAdapter.Fill(dS_SocialData.DataSources_SocialData);
            SDMethods_TableAdapter.Fill(dS_SDMethods.SocialData_Methods);
            SD_ParametersTableAdapter.Fill(dS_SDMethods.SocialData_Parameters);

            //    DS_gridView_DSTree.FocusedRowHandle = Convert.ToInt32(focusedSource);
            //treeListViewState = new TreeListViewState(GS_treeList);
            //treeListViewState.SaveState();

        }
        public void MainForm_Load(object sender, EventArgs e)
        {
            GS_treeList.ExpandAll();
            MP_GStreeList.ExpandAll();
            focusedConcept = GS_treeList.FocusedNode[GS_treeList.KeyFieldName];
            focusedSource = DS_gridView_DSTree.FocusedRowHandle;
            GS_treeList.FocusedNode = GS_treeList.FindNodeByFieldValue("Concept_Name", "Person");
            DS_gridView_DSTree.FocusedRowHandle = 0;
            MP_gridView_MPTreeConcMap.FocusedRowHandle = 0;
            //    focusedSource = DS_gridView_DSTree.FocusedRowHandle;
            //treeListViewState = new TreeListViewState(GS_treeList);
            //treeListViewState.LoadState();
        }

        //------------- Navbar Events Handling -------------------//

        void NavBarControl_ActiveGroupChanged(object sender, DevExpress.XtraNavBar.NavBarGroupEventArgs e)
        {
            navigationFrame.SelectedPageIndex = navBarControl.Groups.IndexOf(e.Group);
        }
        void BarButtonNavigation_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int barItemIndex = barSubItemNavigation.ItemLinks.IndexOf(e.Link);
            navBarControl.ActiveGroup = navBarControl.Groups[barItemIndex];
        }

        //------------- GS_TreeList Events Handling -------------------//
        private void GS_treeList_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            DevExpress.XtraTreeList.TreeList tl = sender as DevExpress.XtraTreeList.TreeList;
            if (e.Node == tl.FocusedNode)
            {
                e.Graphics.FillRectangle(SystemBrushes.Window, e.Bounds);
                Rectangle R = new Rectangle(e.EditViewInfo.ContentRect.Left, e.EditViewInfo.ContentRect.Top, Convert.ToInt32(e.Graphics.MeasureString(e.CellText, e.Appearance.Font).Width - 2), e.Appearance.FontHeight);
                e.Graphics.FillRectangle(SystemBrushes.Highlight, R);
                e.Graphics.DrawString(e.CellText, e.Appearance.Font, SystemBrushes.HighlightText, R, e.Appearance.GetStringFormat());
                e.Handled = true;
            }
        }
        private void GS_treeList_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            ConceptName = GS_treeList.FocusedNode.GetValue(0).ToString();
            string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(CS))
            {
                SqlDataAdapter da = new SqlDataAdapter("select Concept_Id from Concepts_ WHERE Concept_Name = '" + ConceptName + "'", con);
                DataTable table = new DataTable();
                con.Open();
                da.Fill(table);
                object Res = table.Rows[0][0];
                ConceptID = Convert.ToInt32(Res);
            }
            conceptsBS_DataLayout.Filter = String.Format("Concept_Id={0}", ConceptID);
            attributesBS_GirdView1.Filter = String.Format("Domain_Id={0}", ConceptID);
            relations_BS_GridView2.Filter = String.Format("Domain_Id={0}", ConceptID);

        }

        private void GS_treeList_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                popupMenu_Concepts.ShowPopup(Cursor.Position);
        }

        private void GS_treeList_GetSelectImage(object sender, DevExpress.XtraTreeList.GetSelectImageEventArgs e)
        {
            if (e.FocusedNode)
                e.NodeImageIndex = 0;
            else
                e.NodeImageIndex = 7;
        }

        //------------- Navbar Buttons Click Handling -------------------//

        //-----------Global Schema 
        private void BarButtonAddConcept_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            focusedConcept = GS_treeList.FocusedNode[GS_treeList.KeyFieldName];
            ConceptsFrom ConceptsFrom = new ConceptsFrom();
            ConceptsFrom.Show();
        }
        private void barButtonDeleteConcept_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(CS))
            {
                SqlCommand cmd = new SqlCommand("spConcepts_Delete", con);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Concept_Id", ConceptID);
                con.Open();

                if (MessageBox.Show("Are you sure you want to delete  [" + Concept_NameTextEdit.Text + "]  Concept? All it's Attributes and Relations will be aslo deleted !", "Confirm Concept Deletion",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                {
                    cmd.ExecuteNonQuery();
                    concepts_TAdapter.Fill(gS_Concepts.Concepts_);
                    GS_treeList.ExpandAll();
                }
            }
        }
        private void barButtonUpdateConcept_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(CS))
            {
                SqlCommand cmd = new SqlCommand("spConcepts_Update", con);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Concept_Id", ConceptID);
                cmd.Parameters.AddWithValue("@Vocabulary_Id", Vocabulary_IdTextEdit.EditValue);
                cmd.Parameters.AddWithValue("@Concept_Name", Concept_NameTextEdit.Text);
                cmd.Parameters.AddWithValue("@SubConceptOf_Id", SubConceptOfLookUpEdit.EditValue);
                cmd.Parameters.AddWithValue("@SynSet ", SynSetTextEdit.Text);
                cmd.Parameters.AddWithValue("@Comment ", CommentTextEdit.Text);
                con.Open();
                cmd.ExecuteNonQuery();
                focusedConcept = GS_treeList.FocusedNode[GS_treeList.KeyFieldName];
                MessageBox.Show("The Concept [" + Concept_NameTextEdit.Text + "] was succesfuly updated", "Update Concept", MessageBoxButtons.OK, MessageBoxIcon.Information);
                concepts_TAdapter.Fill(gS_Concepts.Concepts_);
                GS_treeList.ExpandAll();
                GS_treeList.FocusedNode = GS_treeList.FindNodeByKeyID(focusedConcept);

            }
        }

        //-----------Data Sources 
        private void barButtonAddSource_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SourcesFrom SourcesFrom = new SourcesFrom();
            SourcesFrom.Show();
        }
        private void barButtonDeleteSource_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(CS))
            {
                SqlCommand cmd = new SqlCommand("spDataSource_Delete", con);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Source_Id", SourceID);
                con.Open();

                if (MessageBox.Show("Are you sure you want to delete  [" + SourceName + "]  Data Source? All it's child objects will be aslo deleted !", "Confirm Data Source Deletion",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                {
                    cmd.ExecuteNonQuery();
                    dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);
                }
            }
        }

        private void barButtonUpdateSource_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
            switch (SourceType)
            {
                case "RelationalData":
                    using (SqlConnection con = new SqlConnection(CS))
                    {
                        SqlCommand cmd = new SqlCommand("spDataSource_RelationalData_Update", con);
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Source_Id", SourceID);
                        cmd.Parameters.AddWithValue("@Source_Type", "RelationalData");
                        cmd.Parameters.AddWithValue("@Source_Name", Source_NameRDBtextEdit.Text);
                        cmd.Parameters.AddWithValue("@Provider", RDB_ProviderTextEdit.Text);
                        cmd.Parameters.AddWithValue("@Server", RDB_ServerNameTextEdit.Text);
                        cmd.Parameters.AddWithValue("@Con_Str ", RDB_Con_StrTextEdit.Text);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        MessageBox.Show("The DataSource [" + Source_NameRDBtextEdit.Text + "] was succesfuly updated", "Update DataSource", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);
                    }
                    break;
                case "LinkedData":
                    using (SqlConnection con = new SqlConnection(CS))
                    {
                        SqlCommand cmd = new SqlCommand("spDataSource_LinkedData_Update", con);
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Source_Id", SourceID);
                        cmd.Parameters.AddWithValue("@Source_Type", "LinkedData");
                        cmd.Parameters.AddWithValue("@Source_Name", SourceName_LDTextEdit.Text);
                        cmd.Parameters.AddWithValue("@Endpoint_URL", LD_Endpoint_URLTextEdit.Text);
                        cmd.Parameters.AddWithValue("@NbrOf_Results ", LD_NbrOf_ResultsTextEdit.Value);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        MessageBox.Show("The DataSource [" + SourceName_LDTextEdit.Text + "] was succesfuly updated", "Update DataSource", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);
                    }
                    break;
                case "SocialData":
                    using (SqlConnection con = new SqlConnection(CS))
                    {
                        SqlCommand cmd = new SqlCommand("spDataSource_SocialData_Update", con);
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Source_Id", SourceID);
                        cmd.Parameters.AddWithValue("@Source_Type", "SocialData");
                        cmd.Parameters.AddWithValue("@Source_Name", SourceName_SDTextEdit.Text);
                        cmd.Parameters.AddWithValue("@API_Type", SD_API_TypeTextEdit.Text);
                        cmd.Parameters.AddWithValue("@API_URL", SD_API_URLTextEdit.Text);
                        cmd.Parameters.AddWithValue("@API_Key", SD_AccesTokenTextEdit.Text);
                        cmd.Parameters.AddWithValue("@NbrOf_Results", SD_NbrOf_ResultsTextEdit.Value);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        MessageBox.Show("The DataSource [" + SourceName_SDTextEdit.Text + "] was succesfuly updated", "Update DataSource", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        dataSourcesTableAdapter.Fill(dS_Datasources.DataSources);
                        break;

                    }
            }

        }
        //------------- GridView InitNewRow Handling -------------------//

        private void gridView_Att_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            GS_gridView_Att.SetRowCellValue(e.RowHandle, "Domain_Id", ConceptID);
        }

        private void gridView_Rel_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            GS_gridView_Rel.SetRowCellValue(e.RowHandle, "Domain_Id", ConceptID);
        }

        //------------- GridControls EmbeddedNavigator_ButtonClick Handling -------------------//

        private void gridControl_Att_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
            focusedConcept = GS_treeList.FocusedNode[GS_treeList.KeyFieldName];
            int AttributID = Convert.ToInt32(GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Attribut_Id"));
            if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                if (MessageBox.Show("Are you sure you want to delete the current Attribute?", "Confirm Attribute Deletion",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                    using (SqlConnection con = new SqlConnection(CS))
                    {
                        SqlCommand cmd = new SqlCommand("spAttributs_Delete", con);
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Attribut_Id", AttributID);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        attributes_TAdapter.Fill(gS_Attributes.Attributes_);
                        GS_treeList.ExpandAll();
                    }
                }

            }
            if (e.Button.ButtonType == NavigatorButtonType.EndEdit)
            {
                GS_gridView_Att.PostEditor();
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    DataRowView focusedRow = (DataRowView)GS_gridView_Att.GetFocusedRow();
                    if (focusedRow.IsNew)
                    {
                        SqlCommand cmd1 = new SqlCommand("spAttributs_Insert", con);
                        cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd1.Parameters.AddWithValue("@Attribute_Name", GS_gridView_Att.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Attribute_Name"));
                        cmd1.Parameters.AddWithValue("@Domain_Id", GS_gridView_Att.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Domain_Id"));
                        cmd1.Parameters.AddWithValue("@Range", GS_gridView_Att.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Range"));
                        cmd1.Parameters.AddWithValue("@Comment", GS_gridView_Att.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Comment"));
                        cmd1.Parameters.AddWithValue("@SynSet", GS_gridView_Att.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "SynSet"));
                        con.Open();
                        cmd1.ExecuteNonQuery();
                        attributes_TAdapter.Fill(gS_Attributes.Attributes_);
                    }
                    else if (!focusedRow.IsNew)
                    {
                        using (con)
                        {
                            SqlCommand cmd2 = new SqlCommand("spAttributs_Update", con);
                            cmd2.CommandType = System.Data.CommandType.StoredProcedure;
                            cmd2.Parameters.AddWithValue("@Attribut_Id", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Attribut_Id"));
                            cmd2.Parameters.AddWithValue("@Attribute_Name", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Attribute_Name"));
                            cmd2.Parameters.AddWithValue("@Domain_Id", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Domain_Id"));
                            cmd2.Parameters.AddWithValue("@Range", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Range"));
                            cmd2.Parameters.AddWithValue("@Comment", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "Comment"));
                            cmd2.Parameters.AddWithValue("@SynSet", GS_gridView_Att.GetRowCellValue(GS_gridView_Att.FocusedRowHandle, "SynSet"));
                            con.Open();
                            cmd2.ExecuteNonQuery();
                            attributes_TAdapter.Fill(gS_Attributes.Attributes_);
                        }
                    }
                }
            }

        }

        private void gridControl_Rel_EmbeddedNavigator_ButtonClick(object sender, NavigatorButtonClickEventArgs e)
        {
            focusedConcept = GS_treeList.FocusedNode[GS_treeList.KeyFieldName];
            int RelationID = Convert.ToInt32(GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "Relation_Id"));
            if (e.Button.ButtonType == NavigatorButtonType.Remove)
            {
                if (MessageBox.Show("Are you sure you want to delete the current Relation?", "Confirm Relation Deletion",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                    using (SqlConnection con = new SqlConnection(CS))
                    {
                        SqlCommand cmd = new SqlCommand("spRelations_Delete", con);
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Relation_Id", RelationID);
                        con.Open();
                        cmd.ExecuteNonQuery();
                        relations_TableAdapter.Fill(gS_Relations.Relations_);
                        GS_treeList.ExpandAll();
                    }
                }

            }

            if (e.Button.ButtonType == NavigatorButtonType.EndEdit)
            {
                GS_gridView_Rel.PostEditor();
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    DataRowView focusedRow = (DataRowView)GS_gridView_Rel.GetFocusedRow();
                    if (focusedRow.IsNew)
                    {
                        SqlCommand cmd1 = new SqlCommand("spRelations_Insert", con);
                        cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd1.Parameters.AddWithValue("@RelationName", GS_gridView_Rel.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "RelationName"));
                        cmd1.Parameters.AddWithValue("@Domain_Id", GS_gridView_Rel.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Domain_Id"));
                        cmd1.Parameters.AddWithValue("@Range_Id", GS_gridView_Rel.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Range_Id"));
                        cmd1.Parameters.AddWithValue("@Comment", GS_gridView_Rel.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "Comment"));
                        cmd1.Parameters.AddWithValue("@SynSet", GS_gridView_Rel.GetRowCellValue(DevExpress.XtraGrid.GridControl.NewItemRowHandle, "SynSet"));
                        con.Open();
                        cmd1.ExecuteNonQuery();
                        relations_TableAdapter.Fill(gS_Relations.Relations_);
                    }
                    else if (!focusedRow.IsNew)
                    {
                        using (con)
                        {
                            SqlCommand cmd2 = new SqlCommand("spRelations_Update", con);
                            cmd2.CommandType = System.Data.CommandType.StoredProcedure;
                            cmd2.Parameters.AddWithValue("@Relation_Id", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "Relation_Id"));
                            cmd2.Parameters.AddWithValue("@RelationName", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "RelationName"));
                            cmd2.Parameters.AddWithValue("@Domain_Id", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "Domain_Id"));
                            cmd2.Parameters.AddWithValue("@Range_Id", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "Range_Id"));
                            cmd2.Parameters.AddWithValue("@Comment", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "Comment"));
                            cmd2.Parameters.AddWithValue("@SynSet", GS_gridView_Rel.GetRowCellValue(GS_gridView_Rel.FocusedRowHandle, "SynSet"));
                            con.Open();
                            cmd2.ExecuteNonQuery();
                            relations_TableAdapter.Fill(gS_Relations.Relations_);
                        }
                    }
                }
            }
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //TreeListNode node = GS_treeList.FindNodeByFieldValue("Concept_Name", "Concept_Name");
            //MessageBox.Show(node.ToString());
            //  MessageBox.Show(gridView_Att.GetRowCellValue(gridView_Att.FocusedRowHandle, "Attribut_Id").ToString());
            SqlConnectionStringBuilder con = new SqlConnectionStringBuilder();
            DataConnectionDialog DataConnectionDialog = new DataConnectionDialog(con);
            DataConnectionDialog.Show();
        }

        //------------------- Custom gridView_DSTree ------------------------------------------//


        private void gridView_DSTree_CustomColumnSort(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnSortEventArgs e)
        {
            if ((e.Column.FieldName == "Source_Type"))
            {
                if ((e.Value1 == e.Value2))
                {
                    e.Result = 0;
                }
                else
                {
                    switch (e.Value1.ToString())
                    {
                        case "RelationalData":
                            e.Result = -1;
                            break;
                        case "SocialData":
                            e.Result = 1;
                            break;
                        case "LinkedData":
                            if ((e.Value2.ToString() == "RelationalData"))
                            {
                                e.Result = 1;
                            }
                            else
                            {
                                e.Result = -1;
                            }

                            break;
                    }
                }

                e.Handled = true;
            }
        }

        //------------- DS_TreeGrid Events Handling -------------------//

        private void gridView_DSTree_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            int focusedRowHandle = -1;
            if (e.FocusedRowHandle == DevExpress.XtraGrid.GridControl.NewItemRowHandle || e.FocusedRowHandle == DevExpress.XtraGrid.GridControl.AutoFilterRowHandle)
                return;
            GridView view = (GridView)sender;
            if (e.FocusedRowHandle < 0)
            {
                if (e.PrevFocusedRowHandle == DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                    focusedRowHandle = 0;
                else if (Control.MouseButtons == MouseButtons.Left || Control.MouseButtons == MouseButtons.Right)
                    focusedRowHandle = e.PrevFocusedRowHandle;
                else
                {
                    int prevRow = view.GetVisibleIndex(e.PrevFocusedRowHandle);
                    int currRow = view.GetVisibleIndex(e.FocusedRowHandle);
                    if (prevRow > currRow)
                        focusedRowHandle = e.PrevFocusedRowHandle - 1;
                    else
                        focusedRowHandle = e.PrevFocusedRowHandle + 1;
                    if (focusedRowHandle < 0) focusedRowHandle = 0;
                    if (focusedRowHandle >= view.DataRowCount) focusedRowHandle = view.DataRowCount - 1;
                }
                view.FocusedRowHandle = focusedRowHandle < 0 ? 0 : focusedRowHandle;
            }
        }

        private void DS_gridView_DSTree_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            if (DS_gridView_DSTree.FocusedRowHandle >= 0)
            {
                SourceName = Convert.ToString(DS_gridView_DSTree.GetFocusedRowCellValue("Source_Name"));
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Source_Id, Source_Type from DataSources WHERE Source_Name = '" + SourceName + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    object Res2 = table.Rows[0][1];
                    SourceID = Convert.ToInt32(Res1);
                    SourceType = Convert.ToString(Res2);
                }
            }

            switch (SourceType)
            {
                case "RelationalData":
                    DS_tabPane.SelectedPageIndex = 0;
                    RelationalDataBS_DataLayout.Filter = String.Format("Source_Id={0}", SourceID);
                    RDB_TablesBS_GridView_Tab.Filter = String.Format("Source_Id={0}", SourceID);
                    break;
                case "LinkedData":
                    DS_tabPane.SelectedPageIndex = 1;
                    LinkedDataBS_DataLayout.Filter = String.Format("Source_Id={0}", SourceID);
                    LD_ConceptsBS_GridView_Con.Filter = String.Format("Source_Id={0}", SourceID);
                    break;
                case "SocialData":
                    DS_tabPane.SelectedPageIndex = 2;
                    SocialDataBS_DataLayout.Filter = String.Format("Source_Id={0}", SourceID);
                    SD_MethodsBS_GridView_Mthd.Filter = String.Format("Source_Id={0}", SourceID);
                    break;
            }
        }

        //------------- DS_GridView_Detail Tab Custom image icon Handling -------------------//

        void GetTabImage(object sender, S133193Example.DrawTabImageEventArgs e)
        {
            e.Image = sharedImageCollection.ImageSource.Images["column.png"];
        }
        void GetTabImage1(object sender, S133193Example.DrawTabImageEventArgs e)
        {
            e.Image = sharedImageCollection.ImageSource.Images["attribute.png"];
        }
        void GetTabImage2(object sender, S133193Example.DrawTabImageEventArgs e)
        {
            e.Image = sharedImageCollection.ImageSource.Images["param.png"];
        }

        private void DS_gridView_DSTree_CustomDrawCell(object sender, DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.Column.FieldName != "Source_Name") return;
            string SrcName = Convert.ToString(view.GetRowCellValue(e.RowHandle, view.Columns["Source_Name"]));
            e.DisplayText = "      " + SrcName;
           // e.Handled = true;
            e.DefaultDraw();
            string SrcType = Convert.ToString(view.GetRowCellValue(e.RowHandle, view.Columns["Source_Type"]));
            switch (SrcType)
            {
                case "RelationalData":
                    e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["ico_ds.PNG"], e.Bounds.Location);
                    break;
                case "LinkedData":
                    e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["LD2.ico"], e.Bounds.Location);
                    break;
                case "SocialData":
                    e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["SD4.png"], e.Bounds.Location);
                    break;
            }
        }
        //------------------- Custom MP_gridView_MPTree ------------------------------------------//
        private void MP_gridView_MPTree_CustomColumnSort(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnSortEventArgs e)
        {
            if ((e.Column.FieldName == "Concept_map_Type"))
            {
                if ((e.Value1 == e.Value2))
                {
                    e.Result = 0;
                }
                else
                {
                    switch (e.Value1.ToString())
                    {
                        case "Conc_2_Tab":
                            e.Result = -1;
                            break;
                        case "Conc_2_Obj":
                            e.Result = 1;
                            break;
                        case "Conc_2_Conc":
                            if ((e.Value2.ToString() == "Conc_2_Tab"))
                            {
                                e.Result = 1;
                            } else
                            {
                                e.Result = -1;
                            } break;
                    }
                }
                e.Handled = true;
            }
        }

        //private void MP_gridView_MPTree_CustomDrawCell(object sender, DevExpress.XtraGrid.Views.Base.RowCellCustomDrawEventArgs e)
        //{
        //    GridView view = sender as GridView;
        //    if (e.Column.FieldName != "Concept_Name") return;
        //    string SrcName = Convert.ToString(view.GetRowCellValue(e.RowHandle, view.Columns["Concept_Name"]));
        //    e.DisplayText = "      " + SrcName;
        //    // e.Handled = true;
        //    e.DefaultDraw();
        //    string MapType = Convert.ToString(view.GetRowCellValue(e.RowHandle, view.Columns["Concept_map_Type"]));
        //    switch (MapType)
        //    {
        //        case "Conc_2_Tab":
        //            e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["mapping.gif"], e.Bounds.Location);
        //            break;
        //        case "Conc_2_Conc":
        //            e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["mapping.gif"], e.Bounds.Location);
        //            break;
        //        case "Conc_2_Obj":
        //            e.Graphics.DrawImage(sharedImageCollection.ImageSource.Images["mapping.gif"], e.Bounds.Location);
        //            break;
        //    }
        //}
        //------------- MP_gridView_MPTree Events Handling -------------------//
        private void MP_gridView_MPTree_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            int focusedRowHandle = -1;
            if (e.FocusedRowHandle == DevExpress.XtraGrid.GridControl.NewItemRowHandle || e.FocusedRowHandle == DevExpress.XtraGrid.GridControl.AutoFilterRowHandle)
                return;
            GridView view = (GridView)sender;
            if (e.FocusedRowHandle < 0)
            {
                if (e.PrevFocusedRowHandle == DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                    focusedRowHandle = 0;
                else if (Control.MouseButtons == MouseButtons.Left || Control.MouseButtons == MouseButtons.Right)
                    focusedRowHandle = e.PrevFocusedRowHandle;
                else
                {
                    int prevRow = view.GetVisibleIndex(e.PrevFocusedRowHandle);
                    int currRow = view.GetVisibleIndex(e.FocusedRowHandle);
                    if (prevRow > currRow)
                        focusedRowHandle = e.PrevFocusedRowHandle - 1;
                    else
                        focusedRowHandle = e.PrevFocusedRowHandle + 1;
                    if (focusedRowHandle < 0) focusedRowHandle = 0;
                    if (focusedRowHandle >= view.DataRowCount) focusedRowHandle = view.DataRowCount - 1;
                }
                view.FocusedRowHandle = focusedRowHandle < 0 ? 0 : focusedRowHandle;
            }
        }

        //------------------ MP_GStreeList Events Handling -------------------//
        private void MP_GStreeList_GetSelectImage(object sender, DevExpress.XtraTreeList.GetSelectImageEventArgs e)
        {
            if (e.FocusedNode)
                e.NodeImageIndex = 0;
            else
                e.NodeImageIndex = 7;
        }

        //-------------  MP_SourcesMetadata N1 GridViews Events Handling -------------------//

        private void MP_TablesGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (MP_TablesGridView.FocusedRowHandle >= 0)
            {
                TabName = Convert.ToString(MP_TablesGridView.GetFocusedRowCellValue("Table_Name"));
                MP_TableNameTextEdit.Text = TabName;
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Table_Id from RelationalData_Tables WHERE Table_Name = '" + TabName + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    TabID = Convert.ToInt32(Res1);
                }
            }
            RDB_ColumnsBS_GridView_Col.Filter = String.Format("Table_Id={0}", TabID);
        }

        private void MP_ConceptsGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (MP_ConceptsGridView.FocusedRowHandle >= 0)
            {
                ConcName = Convert.ToString(MP_ConceptsGridView.GetFocusedRowCellValue("Concept_Name"));
                MP_ConcNameTextEdit.Text = ConcName;
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Concept_Id from LinkedData_Concepts WHERE Concept_Name = '" + ConcName + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    ConcID = Convert.ToInt32(Res1);
                }
            }
            LD_AttributesBS_GridView_Att.Filter = String.Format("Concept_Id={0}", ConcID);
        }

        private void MP_ObjectsGridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (MP_ObjectsGridView.FocusedRowHandle >= 0)
            {
                ObjName = Convert.ToString(MP_ObjectsGridView.GetFocusedRowCellValue("Method_Object"));
                MP_ObjectNameTextEdit.Text = ObjName;
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Method_Id from SocialData_Methods WHERE Method_Object = '" + ObjName + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    ObjID = Convert.ToInt32(Res1);
                }
            }
            SD_ParamsBS_GridView_Param.Filter = String.Format("Method_Id={0}", ObjID);
        }

        private void MP_gridView_MPTree_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            if (MP_gridView_MPTreeConcMap.FocusedRowHandle >= 0)
            {
                ConceptName = Convert.ToString(MP_gridView_MPTreeConcMap.GetFocusedRowCellValue("Concept_Name"));
                MP_MappingNameTextEdit.Text = "Mapping for '" + ConceptName + "'";
                MP_ConceptNameTextEdit.Text = MP_ConceptNameTextEdit2.Text= MP_ConceptNameTextEdit3.Text= ConceptName;
                ConceptMapID = Convert.ToInt32(MP_gridView_MPTreeConcMap.GetFocusedRowCellValue("Concept_map_Id"));
                Attribut_mapBS_TreeGridAttMap.Filter = String.Format("Concept_map_Id={0}", ConceptMapID);
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Concept_map_Type, Concept_Id  FROM  Concept_map WHERE Concept_map_Id = '" + ConceptMapID + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    object Res2 = table.Rows[0][1];
                    ConceptMapType = Convert.ToString(Res1);
                    ConceptID = Convert.ToInt32(Res2);
                }
                MP_GStreeList.FocusedNode = MP_GStreeList.FindNodeByKeyID(ConceptID);
                switch (ConceptMapType)
                {
                    case "Conc_2_Tab": 
                        MP_tabPaneSourcesN1.SelectedPageIndex = 0;
                        MP_tabPaneSourcesN2.SelectedPageIndex = 0;
                        MP_tabPaneConceptsMappingPatterns.SelectedPageIndex = 0;
                        MP_tabPaneAttributesMappingPatterns.SelectedPageIndex = 0;
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select Table_Id  FROM  Concept_map_Conc_2_Tab WHERE Concept_map_Id = '" + ConceptMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            TabID = Convert.ToInt32(Res1);
                        }
                        int rowHandle = MP_TablesGridView.LocateByValue("Table_Id", TabID);
                        if (rowHandle != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_TablesGridView.FocusedRowHandle = rowHandle;
                        break;
                    case "Conc_2_Conc":
                        MP_tabPaneSourcesN1.SelectedPageIndex = 1;
                        MP_tabPaneSourcesN2.SelectedPageIndex = 1;
                        MP_tabPaneConceptsMappingPatterns.SelectedPageIndex = 1;
                        MP_tabPaneAttributesMappingPatterns.SelectedPageIndex = 1;
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select Conc_Id  FROM  Concept_map_Conc_2_Conc WHERE Concept_map_Id = '" + ConceptMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            ConcID = Convert.ToInt32(Res1);
                        }
                        int rowHandle2 = MP_ConceptsGridView.LocateByValue("Concept_Id", ConcID);
                        if (rowHandle2 != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_ConceptsGridView.FocusedRowHandle = rowHandle2;
                        break;
                    case "Conc_2_Obj":
                        MP_tabPaneSourcesN1.SelectedPageIndex = 2;
                        MP_tabPaneSourcesN2.SelectedPageIndex = 2;
                        MP_tabPaneConceptsMappingPatterns.SelectedPageIndex = 2;
                        MP_tabPaneAttributesMappingPatterns.SelectedPageIndex = 2;
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select [Object_Id]  FROM  Concept_map_Conc_2_Obj WHERE Concept_map_Id = '" + ConceptMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            ObjID = Convert.ToInt32(Res1);
                        }
                        int rowHandle3 = MP_ObjectsGridView.LocateByValue("Method_Id", ObjID);
                        if (rowHandle3 != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_ObjectsGridView.FocusedRowHandle = rowHandle3;
                        break;
                }
                MP_gridView_MPTreeAttMap.FocusedRowHandle = 0;
            }
        }

        private void MP_gridView_MPTreeAttMap_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            if (MP_gridView_MPTreeAttMap.FocusedRowHandle >= 0)
            {
                AttributName = Convert.ToString(MP_gridView_MPTreeAttMap.GetFocusedRowCellValue("Attribute_Name"));
                MP_AttributNameTextEdit.Text = MP_AttributNameTextEdit2.Text = MP_AttributNameTextEdit3.Text = AttributName;
                AttributMapID = Convert.ToInt32(MP_gridView_MPTreeAttMap.GetFocusedRowCellValue("Attribut_map_Id"));
                string CS = ConfigurationManager.ConnectionStrings["DXData_Hub.Properties.Settings.Mapping_SchemaConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(CS))
                {
                    SqlDataAdapter da = new SqlDataAdapter("select Attribut_map_Type, Attribut_Id  FROM  Attribut_map WHERE Attribut_map_Id = '" + AttributMapID + "'", con);
                    DataTable table = new DataTable();
                    con.Open();
                    da.Fill(table);
                    object Res1 = table.Rows[0][0];
                    object Res2 = table.Rows[0][1];
                    AttributMapType = Convert.ToString(Res1);
                    AttributID = Convert.ToInt32(Res2);
                }
                int rowHandle0 = MP_AttributesGridView.LocateByValue("Attribut_Id", AttributID);
                if (rowHandle0 != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                    MP_AttributesGridView.FocusedRowHandle = rowHandle0;
                switch (AttributMapType)
                {
                    case "Att_2_Col":
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select Column_Id  FROM  Attribut_map_Att_2_Col WHERE Attribut_map_Id = '" + AttributMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            ColID = Convert.ToInt32(Res1);
                        }
                        int rowHandle = MP_ColumnsGridView.LocateByValue("Column_Id", ColID);
                        if (rowHandle != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_ColumnsGridView.FocusedRowHandle = rowHandle;
                        MP_ColumnNameTextEdit.Text = Convert.ToString(MP_ColumnsGridView.GetFocusedRowCellValue("Column_Name"));
                        break;
                    case "Att_2_Att":
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select Att_Id  FROM  Attribut_map_Att_2_Att WHERE Attribut_map_Id = '" + AttributMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            AttID = Convert.ToInt32(Res1);
                        }
                        int rowHandle2 = MP_AtributesGridView2.LocateByValue("Attribut_Id", AttID);
                        if (rowHandle2 != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_AtributesGridView2.FocusedRowHandle = rowHandle2;
                        MP_AttNameTextEdit.Text= Convert.ToString(MP_AtributesGridView2.GetFocusedRowCellValue("Attribute_Name"));
                        break;
                    case "Att_2_Param":
                        using (SqlConnection con = new SqlConnection(CS))
                        {
                            SqlDataAdapter da = new SqlDataAdapter("select Param_Id  FROM  Attribut_map_Att_2_Param WHERE Attribut_map_Id = '" + AttributMapID + "'", con);
                            DataTable table = new DataTable();
                            con.Open();
                            da.Fill(table);
                            object Res1 = table.Rows[0][0];
                            ParamID = Convert.ToInt32(Res1);
                        }
                        int rowHandle3 = MP_ParamsGridView.LocateByValue("Param_Id", ParamID);
                        if (rowHandle3 != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
                            MP_ParamsGridView.FocusedRowHandle = rowHandle3;
                        MP_ParamNameTextEdit.Text= Convert.ToString(MP_ParamsGridView.GetFocusedRowCellValue("Param_Name"));
                        break;
                }
            }
        }

        //-------------  MP_Treelist and Gridviews RowCellStyle Events Handling -------------------//

        private void MP_GStreeList_NodeCellStyle(object sender, DevExpress.XtraTreeList.GetCustomNodeCellStyleEventArgs e)
        {
            if (e.Node == MP_GStreeList.FocusedNode)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_AttributesGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_TablesGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_ConceptsGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_ObjectsGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_ColumnsGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_AtributesGridView2_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
        private void MP_ParamsGridView_RowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.RowHandle == view.FocusedRowHandle)
            {
                e.Appearance.BackColor = Color.Green;
                e.Appearance.ForeColor = Color.White;
            }
        }
    }
}